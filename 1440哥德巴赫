/*哥德巴赫猜想（Goldbach's conjecture）是数论中存在最久的未解问题之一。这个猜想最早出现在1742年普鲁士人克里斯蒂安·哥德巴赫与瑞士数学家莱昂哈德·欧拉的通信中。用现代的数学语言，哥德巴赫猜想可以陈述为：

“	任一大于2的偶数，都可表示成两个素数之和。	”
这个猜想与当时欧洲数论学家讨论的整数分拆问题有一定联系。整数分拆问题是一类讨论“是否能将整数分拆为某些拥有特定性质的数的和”的问题，比如能否将所有整数都分拆为若干个完全平方数之和，或者若干个完全立方数的和等。而将一个给定的偶数分拆成两个素数之和，则被称之为此数的哥德巴赫分拆。例如，

4 = 2 + 2
6 = 3 + 3
8 = 3 + 5
10 = 3 + 7 = 5 + 5
12 = 5 + 7
14 = 3 + 11 = 7 + 7
…
引用https://zh.wikipedia.org/wiki/%E5%93%A5%E5%BE%B7%E5%B7%B4%E8%B5%AB%E7%8C%9C%E6%83%B3

题目：输入一个素数如a  a=b+c b，c是素数 这种组合有多少个 如 10 = 3 + 7 = 5 + 5
input 10
output 2 
0时 结束 
*/ 
/*#include<stdio.h> //从判断两素数之和是否等于2给定的数入手 
int prime[1000];//n=1230以后结果都是0  100000的话超内存 ，无法执行 
int primeSize;
int mark[1001];
void init()//算出10000以内的素数 ，素数很少所以可以先算出一个大范围内的素数 
{
	int i;
	for(i=1;i<=10000;i++)
	{
		mark[i]=false;
	}
	primeSize=0;
	
	for(i=2;i<=10000;i++)
	{
		if(mark[i]==true)
		continue;
		prime[primeSize++]=i;
		int j;
		for(j=i*i;j<=10000;j+=i)
		{
			mark[j]=true;
		}
	}
}

int main()
{
init();
int n;
while(scanf("%d",&n)!=EOF&&n!=0)
{
	int m=0;
	
	while(prime[m]<=n)
	{
		m++;
	}
	int t,g=0,j,k;
for(j=0;j<=m-1;j++)//判断素数之和是否为给定的数 时间超限 
{
   for(k=j;k<=m-1;k++) 
  {
  	t=prime[j]+prime[k]; 
    if(t==n)
	{
		g++;
		break;
		}
	else
	continue;	
  } 
} 
printf("%d\n",g);
}
return 0;
}
*/ 
//下面是简单解法 
#include <stdio.h>//以a=b+c成立为前提 进一步判断 b c是否为素数来入手 
#include <math.h>
int is_prime(int n){
    if(n<=1) return 0;
    int m=round(sqrt(n));//round四舍五入的函数 
    for(int i=2;i<=m;i++)
        if(n%i==0) return 0;//若执行 那么返回值为0 即不是素数 
    return 1;
}
 
int main(){
    int n;
    while(scanf("%d",&n)!=EOF&&n!=0){
        int ans=0;
        for(int i=2;i<=n/2;i++){
            if(is_prime(i)&&is_prime(n-i)) ans++;//i + n-i =n， 调用is_prime函数来判断是否为素数   返回值都为1时if成立 
        }
        printf("%d\n",ans);
    }
    return 0;
}

